version: '3'
services:

  minio:
    image: minio/minio:latest
    hostname: minio
    container_name: minio
    command: server /export
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    volumes:
      - ./mnt/data:/data
    ports:
      - '9000:9000'

  zookeeper:
    image: "confluentinc/cp-zookeeper:latest"
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: "confluentinc/cp-kafka:latest"
    hostname: broker
    container_name: broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
    ports:
      - '9092:9092'
      - '29092:29092'
    depends_on:
      - zookeeper

  kafka-setup:
    image: "confluentinc/cp-kafka:latest"
    hostname: kafka-setup
    container_name: kafka-setup
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                         cub kafka-ready -b broker:29092 1 60 && \
                         kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic EDGE_FORECAST'"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    depends_on:
      - broker

  forecaster:
    image: "${DOCKER_ID}/iotlab:edge-forecaster"
    hostname: forecaster
    container_name: forecaster
    command: >
      bash -c "while ping -c1 kafka-setup &>/dev/null ; do sleep 1 ; done ; python main.py --settings-file forecaster-configuration/settings.json"
    volumes:
      - "./forecaster-configuration:${CONTAINER_APP_PATH}/forecaster-configuration"
    depends_on:
      - minio
      - kafka-setup